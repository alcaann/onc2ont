---
// frontend/src/components/GraphVisualizer.astro (REVISED - Includes Debounce Fix)
import { Icon } from 'astro-icon/components';
---
<div class="graph-section">
    <h2>Concept Graph</h2>
    <div class="graph-controls">
        {/* Use mdi icons for consistency if preferred, or keep heroicons */}
        <button id="zoom-in-btn" title="Zoom In" aria-label="Zoom In"><Icon name="mdi:magnify-plus-outline" /></button>
        <button id="zoom-out-btn" title="Zoom Out" aria-label="Zoom Out"><Icon name="mdi:magnify-minus-outline" /></button>
        <button id="reset-view-btn" title="Reset View" aria-label="Reset View"><Icon name="mdi:arrow-expand-all" /></button>
        {/* Add layout change button if desired */}
        {/* <button id="change-layout-btn" title="Change Layout" aria-label="Change Layout"><Icon name="mdi:graph-outline" /></button> */}
    </div>
    <div id="cy-container"></div>
    {/* Tooltip element (initially hidden) */}
    <div id="cy-tooltip" style="display: none;"></div>
</div>

<script>
    import cytoscape from 'cytoscape';
    import { wsManager } from '../lib/websocket';
    import { createPopper } from '@popperjs/core';
    import type { Instance as PopperInstance, VirtualElement } from '@popperjs/core';

    // --- Debounce Utility ---
    function debounce<T extends (...args: any[]) => void>(func: T, wait: number): (...args: Parameters<T>) => void {
        let timeout: ReturnType<typeof setTimeout> | null = null;
        return function executedFunction(...args: Parameters<T>) {
            const later = () => {
                timeout = null;
                func(...args);
            };
            if (timeout !== null) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(later, wait);
        };
    }
    // --- End Debounce Utility ---


    // --- Elements ---
    const cyContainer = document.getElementById('cy-container');
    const tooltip = document.getElementById('cy-tooltip');
    const zoomInBtn = document.getElementById('zoom-in-btn') as HTMLButtonElement | null;
    const zoomOutBtn = document.getElementById('zoom-out-btn') as HTMLButtonElement | null;
    const resetViewBtn = document.getElementById('reset-view-btn') as HTMLButtonElement | null;
    // const changeLayoutBtn = document.getElementById('change-layout-btn') as HTMLButtonElement | null;

    // --- State ---
    let cy: cytoscape.Core | null = null;
    let popperInstance: PopperInstance | null = null;
    let currentLayoutOptions: cytoscape.LayoutOptions | null = null; // Store layout options

    // --- Layouts ---
    const LAYOUTS: { [key: string]: cytoscape.LayoutOptions } = {
        cose: {
            name: 'cose',
            idealEdgeLength: 100, nodeOverlap: 20, refresh: 20, fit: true, padding: 30,
            randomize: false, componentSpacing: 100, nodeRepulsion: 400000, edgeElasticity: 100,
            nestingFactor: 5, gravity: 80, numIter: 1000, initialTemp: 200, coolingFactor: 0.95,
            minTemp: 1.0, animate: false
        },
        breadthfirst: {
            name: 'breadthfirst', fit: true, padding: 30, directed: true, spacingFactor: 1.5
        },
        circle: {
            name: 'circle', fit: true, padding: 30
        },
        grid: {
            name: 'grid', fit: true, padding: 30
        }
    };
    let currentLayoutName = 'cose'; // Default layout

    // --- Styles ---
    const cyStyle: cytoscape.Stylesheet[] = [
        {
            selector: 'node',
            style: {
                'background-color': '#666', // Default color
                'label': 'data(label)',
                'width': 'mapData(sem_types.length, 1, 5, 20, 60)', // Size based on number of types
                'height': 'mapData(sem_types.length, 1, 5, 20, 60)',
                'font-size': '10px',
                'text-valign': 'bottom',
                'text-halign': 'center',
                'text-margin-y': '5px',
                'color': '#333', // Label color
                'text-wrap': 'wrap',
                'text-max-width': '80px',
                'border-width': 1,
                'border-color': '#ccc'
            }
        },
        { // Style for nodes with polarity = -1 (negated)
            selector: 'node[polarity = -1]',
            style: {
                'background-color': '#FF6347', // Tomato red for negated
                'border-color': '#DC143C', // Crimson border
                'border-style': 'dashed',
            }
        },
         { // Style for nodes with uncertainty = 1
            selector: 'node[uncertainty = 1]',
            style: {
                'shape': 'rectangle', // Different shape for uncertain
                'background-color': '#FFD700', // Gold for uncertain
            }
        },
        // Add specific type styling if needed (using data attributes set in updateGraphData)
        {
            selector: 'node[type="DISEASE"]', // Example: Disease type
            style: { 'background-color': '#dc3545', 'border-color': '#b02a37' }
        },
        {
            selector: 'node[type="CHEMICAL"]', // Example: Chemical type
            style: { 'background-color': '#ffc107', 'border-color': '#cc9a06' }
        },
        {
            selector: 'node[type="OTHER"]', // Example: Other type
            style: { 'background-color': '#6c757d', 'border-color': '#5a6268' }
        },
        {
            selector: 'edge',
            style: {
                'width': 2,
                'line-color': '#ccc',
                'target-arrow-color': '#ccc',
                'target-arrow-shape': 'triangle',
                'curve-style': 'bezier',
                'label': 'data(label)',
                'font-size': '8px',
                'color': '#555',
                'text-rotation': 'autorotate',
                'text-margin-y': -10,
                'text-background-opacity': 0.8, // Slightly transparent background
                'text-background-color': '#ffffff',
                'text-background-padding': '1px',
                'text-background-shape': 'round-rectangle'
            }
        }
    ];

    // --- Functions ---

    function runLayout(layoutName: string = currentLayoutName) {
        if (!cy) return;
        let options = LAYOUTS[layoutName];
        if (!options) {
            console.error(`Layout "${layoutName}" not found. Using default.`);
            layoutName = 'cose'; // Fallback to default
            currentLayoutName = layoutName;
            options = LAYOUTS[layoutName];
        }
        currentLayoutOptions = options; // Store the used options
        const layout = cy.layout(options);
        console.log(`[GraphVisualizer] Running layout: ${layoutName}`);
        layout.run();
        console.log(`[GraphVisualizer] Layout ${layoutName} finished.`);
    }

    function createPopperElement(node: cytoscape.NodeSingular): VirtualElement {
        const { x, y } = node.renderedPosition();
        // Use client bounding rect for better positioning relative to viewport
        const domRect = cyContainer?.getBoundingClientRect() ?? { top: 0, left: 0 };
        return {
            getBoundingClientRect: () => new DOMRect(x + domRect.left, y + domRect.top, 0, 0),
        };
    }

    function showTooltip(node: cytoscape.NodeSingular) {
        if (!tooltip) return;
        const data = node.data();
        // Customize tooltip content here
        let content = `<strong>${data.label || data.id}</strong>`; // Use label or ID
        if (data.cui) content += `<br>CUI: ${data.cui}`;
        if (data.matched_term && data.matched_term !== data.label) content += `<br>Term: ${data.matched_term}`;
        if (data.sem_types && data.sem_types.length > 0) content += `<br>Types: ${data.sem_types.join(', ')}`;
        if (data.text_span) content += `<br>Span: ${data.text_span}`;
        if (data.polarity === -1) content += `<br>Polarity: Negative`;
        if (data.uncertainty === 1) content += `<br>Uncertainty: Present`;

        tooltip.innerHTML = content;
        tooltip.style.display = 'block';

        if (popperInstance) {
            popperInstance.destroy();
        }
        popperInstance = createPopper(createPopperElement(node), tooltip, {
            placement: 'top',
            modifiers: [{ name: 'offset', options: { offset: [0, 8] } }],
        });
    }

    function hideTooltip() {
        if (tooltip) {
            tooltip.style.display = 'none';
        }
        if (popperInstance) {
            popperInstance.destroy();
            popperInstance = null;
        }
    }

    function setControlsDisabled(disabled: boolean) {
        if (zoomInBtn) zoomInBtn.disabled = disabled;
        if (zoomOutBtn) zoomOutBtn.disabled = disabled;
        if (resetViewBtn) resetViewBtn.disabled = disabled;
        // if (changeLayoutBtn) changeLayoutBtn.disabled = disabled;
    }

    function initializeGraph() {
        if (!cyContainer) {
            console.error("[GraphVisualizer] Cytoscape container not found!");
            return;
        }
        if (cy) {
            console.log("[GraphVisualizer] Cytoscape instance already exists.");
            return; // Avoid re-initializing
        }

        console.log("[GraphVisualizer] Initializing Cytoscape...");
        try {
            cy = cytoscape({
                container: cyContainer,
                elements: [], // Start empty
                style: cyStyle,
                layout: { name: 'preset' }, // Use preset initially, run layout later
                // Interaction options
                zoom: 1,
                minZoom: 0.1,
                maxZoom: 3,
                zoomingEnabled: true,
                userZoomingEnabled: true,
                panningEnabled: true,
                userPanningEnabled: true,
                boxSelectionEnabled: false, // Keep it simple
                autoungrabify: false, // Allow nodes to be grabbed
                autounselectify: false,
            });

            // --- Tooltip Handling ---
            cy.on('mouseover', 'node', (event) => {
                showTooltip(event.target);
            });
            cy.on('mouseout tapend', 'node', () => {
                hideTooltip();
            });
            // Hide tooltip on viewport events too
            cy.on('pan zoom resize', () => {
                 hideTooltip();
            });

            // --- Button Listeners ---
            if (zoomInBtn) zoomInBtn.onclick = () => cy?.zoom({ level: cy.zoom() * 1.2, renderedPosition: { x: cy.width() / 2, y: cy.height() / 2 } });
            if (zoomOutBtn) zoomOutBtn.onclick = () => cy?.zoom({ level: cy.zoom() / 1.2, renderedPosition: { x: cy.width() / 2, y: cy.height() / 2 } });
            if (resetViewBtn) resetViewBtn.onclick = () => cy?.fit(undefined, 30); // Fit with padding
            // if (changeLayoutBtn) changeLayoutBtn.onclick = () => { /* Add logic to cycle layouts */ };

            setControlsDisabled(true); // Initially disabled until data loads

            console.log("[GraphVisualizer] Cytoscape initialized successfully.");

            // --- Resize Observer with Debounce ---
            if (typeof ResizeObserver !== 'undefined') {
                const debouncedResize = debounce(() => {
                    if (cy) {
                        console.log("[GraphVisualizer] Debounced resize triggered: Resizing and fitting graph.");
                        cy.resize();
                        cy.fit(undefined, 30); // Fit with padding after resize
                    }
                }, 250); // Wait 250ms after the last resize event

                const resizeObserver = new ResizeObserver(entries => {
                    // We only need to react, the debounced function handles the logic
                    debouncedResize();
                });

                // Observe the container element
                resizeObserver.observe(cyContainer);
                console.log("[GraphVisualizer] ResizeObserver attached to graph container.");
            } else {
                console.warn("[GraphVisualizer] ResizeObserver not supported, graph may not resize automatically.");
                // Fallback: simple window resize listener (less efficient)
                window.addEventListener('resize', debounce(() => {
                     if (cy) { cy.resize(); cy.fit(undefined, 30); }
                }, 300));
            }


        } catch (error) {
            console.error("[GraphVisualizer] Failed to initialize Cytoscape:", error);
            if (cyContainer) {
                cyContainer.textContent = "Error initializing graph.";
            }
        }
    }

    function updateGraphData(concepts: any[], relations: any[]) {
        if (!cy) {
            console.warn("[GraphVisualizer] Cytoscape instance not available for update.");
            // Attempt to initialize if not already done
            initializeGraph();
            if (!cy) return; // If initialization failed, exit
        }
        console.log(`[GraphVisualizer] Updating graph with ${concepts.length} concepts and ${relations.length} relations.`);

        const nodes = concepts.map(c => ({
            data: {
                id: c.mention_id, // Use mention_id as unique node ID
                label: c.matched_term || c.cui, // Use matched term or CUI as label
                // Pass all relevant data for tooltips and styling
                cui: c.cui,
                sem_types: c.sem_types || [],
                matched_term: c.matched_term,
                text_span: c.text_span,
                polarity: c.polarity,
                uncertainty: c.uncertainty,
                // Add derived type for styling
                type: c.sem_types?.some(st => ["Neoplastic Process", "Disease or Syndrome"].includes(st)) ? "DISEASE" :
                      c.sem_types?.some(st => ["Pharmacologic Substance", "Clinical Drug", "Chemical"].includes(st)) ? "CHEMICAL" :
                      "OTHER"
            }
        }));

        const edges = relations.map((r, index) => ({
            data: {
                id: `e${index}_${r.subject_mention_id}_${r.object_mention_id}`, // Create a unique edge ID
                source: r.subject_mention_id, // Use mention_id for source
                target: r.object_mention_id, // Use mention_id for target
                label: r.relation // Use relation category as label
            }
        }));

        const elements = [...nodes, ...edges];
        console.log('[GraphVisualizer] Mapped Elements:', elements.length);

        // Use batching for potentially better performance
        cy.batch(() => {
            cy.elements().remove(); // Clear existing elements
            cy.add(elements); // Add new elements
        });

        console.log("[GraphVisualizer] Graph elements updated.");
        setControlsDisabled(elements.length === 0); // Enable/disable controls based on content

        // Run layout after adding elements
        runLayout(); // Use default or last used layout
    }


    // --- Event Listeners ---

    // Listen for WebSocket results
    wsManager.onResult((data) => {
        console.log("[GraphVisualizer] Received result via WebSocket.");
        if (data && data.json_data) {
            updateGraphData(data.json_data.concepts || [], data.json_data.relations || []);
        } else {
            console.warn("[GraphVisualizer] Received result, but json_data is missing or invalid.");
            updateGraphData([], []); // Clear the graph
        }
    });

    // Listen for manual updates triggered from JSON editor ('update-graph' event)
    window.addEventListener('update-graph', (event: Event) => {
        console.log("[GraphVisualizer] Received 'update-graph' event.");
        const customEvent = event as CustomEvent;
        if (customEvent.detail && Array.isArray(customEvent.detail.concepts) && Array.isArray(customEvent.detail.relations)) {
            updateGraphData(customEvent.detail.concepts, customEvent.detail.relations);
        } else {
            console.error("[GraphVisualizer] Invalid data received in 'update-graph' event detail:", customEvent.detail);
            alert("Failed to update graph: Invalid JSON data structure.");
        }
    });

    // --- Initialization ---
    // Use setTimeout to ensure the container is definitely rendered and sized
    // This helps prevent the initial "growing" issue as well.
    setTimeout(initializeGraph, 50); // Small delay

</script>

{/* Style block removed - styles are in global.css */}
# FILE: docker-compose.yml
# (REVISED - Removed DB, updated paths, removed scripts references)
services:
  # --- cTAKES Wrapper Service ---
  ctakes_wrapper:
    build:
      context: ./pipelines/ctakes_based
      dockerfile: Dockerfile.ctakes_wrapper
    container_name: ctakes_wrapper_api
    # Internal port 8081 is used by the wrapper API (defined in its Dockerfile)
    # We map host port 8001 to container port 8081 for potential direct access/debugging
    ports:
      - "8001:8081"
    volumes:
      # Mount the local cTAKES distribution into the container
      # IMPORTANT: Ensure this path points to your actual cTAKES 6.0.0 directory
      - ./pipelines/ctakes_based/apache-ctakes-6.0.0:/opt/apache-ctakes-6.0.0:rw # Mount read-write
      # Mount the wrapper API code for development (optional, allows hot-reloading if uvicorn used with --reload)
      # Note: The Dockerfile already copies this, mounting is mainly for dev convenience
      # - ./pipelines/ctakes_based/ctakes_wrapper_api.py:/app/ctakes_wrapper_api.py
    environment:
      # Passed to the wrapper API script via os.getenv()
      - CTAKES_HOME=/opt/apache-ctakes-6.0.0
      - UMLS_API_KEY=${UMLS_API_KEY} # Pass API key from .env file
      - LOG_LEVEL=${LOG_LEVEL:-INFO} # Pass log level from .env, default to INFO
      # Optional: Specify a custom piper file relative to CTAKES_HOME/resources
      # - PIPER_FILE_PATH=org/apache/ctakes/clinical/pipeline/MyCustomPipeline.piper
      # Optional: Specify IO directories if different from defaults in the script
      # - CTAKES_IO_DIR=/ctakes_io
    restart: unless-stopped
    # Healthcheck is defined within the Dockerfile.ctakes_wrapper

  # --- Main FastAPI Application ---
  app:
    build:
      context: .
      dockerfile: Dockerfile # Corrected: Dockerfile is in the root context
    container_name: main_fastapi_app
    ports:
      - "8000:8000" # Expose main API port (Uvicorn runs on 8000 inside)
    volumes:
      # Mount necessary code directories for development hot-reloading
      - ./api:/app/api
      - ./pipelines:/app/pipelines # Mount pipelines base
      # Removed ./scripts:/app/scripts mount
    environment:
      # Environment variables read by api/main.py
      - CTAKES_URL=http://ctakes_wrapper:8081/process # Corrected name and internal port
      - PROCESSING_PIPELINE=${PROCESSING_PIPELINE:-pipelines.ctakes_based.processor.CTakesPipeline} # Load from .env, provide default
      - LOG_LEVEL=${LOG_LEVEL:-INFO} # Load from .env, provide default
    depends_on:
      ctakes_wrapper:
        condition: service_healthy # Wait for the wrapper to be healthy (relies on HEALTHCHECK in wrapper Dockerfile)
    restart: unless-stopped
    # Command to run the FastAPI app with Uvicorn and hot-reloading
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/api --reload-dir /app/pipelines # Removed scripts reload dir

  # --- Frontend Application (Served by Nginx) ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile # Assumes Dockerfile is in ./frontend
    container_name: frontend_nginx # Renamed to reflect Nginx usage
    ports:
      - "8080:80" # Map host port 8080 to Nginx container port 80
    volumes:
      # For development: Mount source code to rebuild automatically if needed
      # For production: This might not be necessary if the image contains built assets
      - ./frontend:/app
      # Exclude node_modules from being overwritten by the host mount in dev
      - /app/node_modules
    environment:
      # URL the browser uses to connect to the backend WebSocket
      # Assumes the browser accesses the app via host port 8080, which proxies to backend port 8000
      - PUBLIC_API_WS_URL=ws://localhost:8080/ws
    depends_on:
      - app # Frontend depends on the backend API being available
    restart: unless-stopped

# Note: Removed top-level networks and volumes as they are no longer needed
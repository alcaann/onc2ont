# --- START OF MODIFIED docker-compose.yml ---
services:
  db:
    image: postgres:15
    container_name: umls_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-umls_db}
      POSTGRES_USER: ${POSTGRES_USER:-umls_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_very_secure_password_here}
    # Map host port 5433 to container port 5432 for external DB tools
    ports:
      - "5433:5432"
    networks:
      - umls_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app: # Backend Python/FastAPI service
    build:
      context: . # Build using the top-level Dockerfile
      dockerfile: Dockerfile
    container_name: umls_processor_app
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      POSTGRES_DB: ${POSTGRES_DB:-umls_db}
      POSTGRES_USER: ${POSTGRES_USER:-umls_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_very_secure_password_here}
      DB_HOST: db
      DB_PORT: 5432
      # PYTHON variables set in Dockerfile
    volumes:
      # Mount the source UMLS data read-only (Keep this)
      - ./data/source/umls/META:/app/data/source/umls/META:ro
      # --- RE-ADD Mount local code for backend development & hot-reloading ---
      - ./api:/app/api:rw
      - ./scripts:/app/scripts:rw
      - ./pipelines:/app/pipelines:rw
      # Note: If you modify requirements.txt, you WILL need to rebuild the image.
      # Note: Ensure entrypoint.sh is copied via Dockerfile, not mounted, unless intended.
    networks:
      - umls_net
    depends_on:
      db:
        condition: service_healthy
    # --- REMOVED Port mapping ---
    # ports:
    #   - "8000:8000" # No longer expose backend directly to host (Nginx will proxy)
    # --- RE-ADD --reload for development ---
    # Make sure uvicorn is installed with [standard] in requirements.txt for watchfiles
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/api --reload-dir /app/scripts --reload-dir /app/pipelines
    restart: unless-stopped

  frontend: # New Frontend Nginx service
    build:
      context: ./frontend # Build using the frontend/Dockerfile
      dockerfile: Dockerfile
    container_name: umls_frontend_nginx
    ports:
      # Map host port 8080 to container port 80 (Nginx default)
      # Access the app via http://localhost:8080
      - "8080:80"
    networks:
      - umls_net
    depends_on:
      - app # Optional, but good practice. Nginx proxy handles backend failures.
    restart: unless-stopped

networks:
  umls_net:
    driver: bridge

volumes:
  postgres_data:
# --- END OF MODIFIED docker-compose.yml ---
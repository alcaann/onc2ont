--- START OF FILE context.txt ---

**Project Goal:** Develop an AI pipeline for a thesis that takes short oncology patient phrases as input, processes them using **Apache cTAKES 6.0.0**, and outputs:
1.  A standardized **JSON** structure containing extracted **NCI Thesaurus (NCIt)** concepts and relationships suitable for a web application frontend.
2.  **(Removed Goal):** An OWL 2 representation of the extracted information.

**Environment & System Architecture:**

1.  **Dockerized Environment:** Fully containerized using Docker Compose (`docker-compose.yml`). Runs via `docker compose up -d` after `docker compose build`.
    *   **`ctakes_wrapper`**: Custom-built service based on `pipelines/ctakes_based/Dockerfile.ctakes_wrapper`.
        *   Runs on a **Java 17** base image (`eclipse-temurin:17-jre-jammy`) with Python 3 installed.
        *   **Mounts** the local host directory `./pipelines/ctakes_based/apache-ctakes-6.0.0` to `/opt/apache-ctakes-6.0.0` inside the container as **read-write**.
        *   Runs a lightweight **FastAPI application (`pipelines/ctakes_based/ctakes_wrapper_api.py`)** on internal port `8081`.
        *   Receives the **UMLS API Key** via the `UMLS_API_KEY` environment variable.
        *   Exposes a `/process` endpoint that starts a new Java cTAKES process for each request.
        *   Includes a `/health` endpoint.
        *   Uses an `asyncio.Lock` to process requests sequentially.
    *   `app`: Backend Python 3.10. Runs FastAPI API via Uvicorn on internal port 8000.
        *   Provides WebSocket endpoint (`/ws`). Uses volume mounts for hot-reloading.
        *   Connects to the **`ctakes_wrapper`** service using `CTAKES_URL`.
        *   Dynamically loads and runs the configured pipeline class (`PROCESSING_PIPELINE` env var).
        *   Responsible for calling the wrapper, parsing XMI, formatting JSON, and communicating via WebSocket.
        *   Depends on a healthy `ctakes_wrapper`.
    *   `frontend`: Nginx. Serves static Astro frontend assets. Maps host port **8080** to container port 80. Proxies WebSocket requests (`/ws`) to the `app` service. Depends on `app`.

2.  **Data Handling & Status:**
    *   **cTAKES 6.0.0 Distribution:** Mounted read-write into the `ctakes_wrapper` container from `./pipelines/ctakes_based/apache-ctakes-6.0.0`.
    *   **UMLS Authentication:** Handled via **API Key** (`UMLS_API_KEY` in `.env`), passed to the `ctakes_wrapper` container, which passes it to the cTAKES `PiperFileRunner`.

**Core Backend Pipeline Architecture:**

Modular via `BaseProcessingPipeline` ABC (`pipelines/base_pipeline.py`).

1.  **Primary Implementation (`pipelines/ctakes_based/processor.py`):**
    *   `CTakesPipeline(BaseProcessingPipeline)` class. Calls the `ctakes_wrapper` API, parses XMI, extracts concepts/relations.
2.  **API Integration (`api/main.py`):**
    *   Loads pipeline, handles WebSocket communication, calls the pipeline's `process` method.

**(OWL Generation Removed)**

**Python Function Summaries:**

*   **`pipelines/base_pipeline.py`**
    *   `BaseProcessingPipeline(ABC)`: Abstract base class for processing pipelines.
        *   `__init__(self, **kwargs)`: Constructor (can be overridden).
        *   `process(self, phrase: str, log_func: Callable[[str], None]) -> Tuple[Dict[str, List[Dict[str, Any]]], str]`: Abstract method to process a phrase and return JSON results and raw output (e.g., XMI).

*   **`pipelines/ctakes_based/processor.py`**
    *   `CTakesPipeline(BaseProcessingPipeline)`: Implements processing using the cTAKES wrapper API.
        *   `__init__(self, ctakes_url: str, timeout: int = 120)`: Initializes with wrapper URL and request timeout.
        *   `process(self, phrase: str, log_func: Callable[[str], None]) -> Tuple[Dict[str, List[Dict[str, Any]]], str]`: Sends phrase to wrapper, receives/parses XMI, extracts concepts/relations, returns JSON and raw XMI.
        *   `_extract_concepts(self, root: 'etree._Element', sofa_string: str, log_func: Callable[[str], None]) -> List[Dict[str, Any]]`: Helper to extract concept mentions from parsed XMI.
        *   `_extract_relations(self, root: 'etree._Element', concepts_map: Dict[str, Dict[str, Any]], log_func: Callable[[str], None]) -> List[Dict[str, Any]]`: Helper to extract relations from parsed XMI.

*   **`pipelines/ctakes_based/ctakes_wrapper_api.py`**
    *   `process_text(text: str = Body(..., media_type='text/plain')) -> PlainTextResponse`: FastAPI endpoint (`/process`). Receives text, runs cTAKES via `subprocess.run`, saves history, returns raw XMI. Uses `asyncio.Lock`.
    *   `health_check() -> JSONResponse`: FastAPI endpoint (`/health`). Checks prerequisites and returns status.

*   **`api/main.py`**
    *   `load_pipeline() -> Optional[BaseProcessingPipeline]`: Dynamically imports and instantiates the pipeline class specified by `PROCESSING_PIPELINE` env var.
    *   `read_root() -> HTMLResponse`: FastAPI endpoint (`/`). Returns simple HTML status page.
    *   `websocket_endpoint(websocket: WebSocket)`: FastAPI WebSocket endpoint (`/ws`). Handles connection, message reception (`process_phrase`), calls pipeline processing in a thread, sends results (`log`, `result`, `error`) back to client.
    *   `process_phrase_task(websocket: WebSocket, data: Dict[str, Any], log_callback_async: Callable[[str], Coroutine[Any, Any, None]])`: Async task to manage the processing of a single phrase, calling the pipeline and sending results/errors.
    *   `log_callback_sync(message: str)`: Synchronous callback passed to the pipeline's `process` method to queue log messages for async sending.

**Frontend Application (Astro):**

*   Communicates via WebSocket managed by `frontend/src/lib/websocket.ts`.
*   Receives `'log'`, `'result'` (containing `json_data` and `raw_xmi`), and `'error'` messages.

**Folder Structure & File Descriptions (Detailed):**

```
.
├── pipelines/
│   ├── ctakes_based/
│   │   ├── __init__.py
│   │   ├── apache-ctakes-6.0.0/    # <-- Local cTAKES files (Mounted, not in image)
│   │   ├── ctakes_wrapper_api.py   # <-- FastAPI wrapper script (starts Java process per request)
│   │   ├── Dockerfile.ctakes_wrapper # <-- Dockerfile for wrapper service
│   │   └── processor.py            # <-- Pipeline class calling the wrapper API
│   └── base_pipeline.py          # (Interface definition)
├── api/
│   └── main.py                   # (FastAPI, WebSocket, dynamic pipeline loading)
├── frontend/                     # (Astro frontend application)
│   ├── public/                   # (Static assets, e.g., favicon)
│   │   └── favicon.svg
│   ├── src/
│   │   ├── components/           # (Reusable Astro/UI components)
│   │   │   ├── HeaderInfo.astro  # (Likely displays title and status)
│   │   │   ├── InputForm.astro   # (Text area and submit button)
│   │   │   ├── LogConsole.astro  # (Displays processing logs)
│   │   │   ├── GraphVisualizer.astro # (Displays Cytoscape graph)
│   │   │   └── OutputViewer.astro # (Tabbed view for JSON and Raw XMI)
│   │   ├── layouts/              # (Overall page structure)
│   │   │   └── Layout.astro      # (Main HTML layout, includes head, body)
│   │   ├── pages/                # (Application pages/routes)
│   │   │   └── index.astro       # (Main page, imports and arranges components)
│   │   ├── lib/                  # (JavaScript/TypeScript modules)
│   │   │   └── websocket.ts      # (Manages WebSocket connection and communication)
│   │   └── styles/               # (CSS styles)
│   │       └── global.css        # (Global application styles)
│   ├── astro.config.mjs          # (Astro configuration file)
│   ├── Dockerfile                # (Builds the Nginx image for frontend)
│   ├── nginx.conf                # (Nginx configuration, including WS proxy)
│   ├── package.json              # (Frontend Node.js dependencies)
│   ├── package-lock.json
│   ├── tsconfig.json             # (TypeScript configuration)
│   └── README.md                 # (Frontend specific README)
├── .env                          # <-- Contains UMLS_API_KEY, PROCESSING_PIPELINE, CTAKES_URL etc.
├── .env.example
├── docker-compose.yml            # (Defines ctakes_wrapper, app, frontend services)
├── Dockerfile                    # (Builds the 'app' service)
├── entrypoint.sh                 # (Entrypoint for 'app' service)
├── requirements.txt              # (Python dependencies for 'app' service)
├── .dockerignore                 # (Specifies files/dirs to ignore during Docker build)
├── context.txt                   # (This file)
└── README.md                     # (Main project README)
```

**Current Status & Achievements:**

*   Stable Docker environment with orchestrated services (`ctakes_wrapper`, `app`, `frontend`).
*   Successfully integrated **file-based cTAKES 6.0.0 execution** via a custom internal wrapper API. Manual execution inside the container confirms cTAKES pipeline works.
*   cTAKES authentication handled via **UMLS API Key**.
*   Backend `CTakesPipeline` successfully calls the wrapper, receives XMI, and parses it.
*   Backend API dynamically loads the selected pipeline.
*   Frontend application connects via WebSocket and can send requests. Input/output display (JSON editor, raw XMI view, logs) is functional.
*   End-to-end processing (Frontend -> App -> Wrapper -> cTAKES -> Wrapper -> App -> Frontend) is working.

**Known Issues / Challenges:**

1.  **Performance Bottleneck:** The primary issue is the **significant delay/timeout** during processing due to the `ctakes_wrapper` starting a **new Java Virtual Machine (JVM) and initializing the entire cTAKES pipeline for every single request**.
2.  **Frontend Concept Display:** (Verify if still an issue) Concepts might not be appearing in the frontend knowledge graph (`GraphVisualizer.astro`). Needs re-testing.
3.  **Relation Extraction:** Current pipeline (`CustomPipeline.piper`) likely performs minimal relation extraction.
4.  **cTAKES Pipeline Tuning:** The current `.piper` file might not be optimal.
5.  **Error Handling Robustness:** Could be improved.
6.  **Semantic Type Information:** Not currently extracted.

**Next Milestones / Immediate Focus:**

1.  **Address Performance Bottleneck:**
    *   **Short-term:** Increase request timeout in `processor.py`.
    *   **Long-term (Crucial):** Re-architect cTAKES integration (e.g., UIMA AS, persistent wrapper process) to avoid per-request startup.
2.  **Verify/Debug Frontend Concept Display:** Confirm if concepts render correctly now. Debug data flow if necessary.
3.  **Plan Relation Extraction Strategy:** Decide on approach (cTAKES pipeline modification, post-processing, hybrid).
4.  **Address Semantic Types:** Determine if needed and how to extract.
5.  **Thesis Writing & Documentation:** Document architecture, implementation, performance, results.

--- END OF UPDATED context.txt ---